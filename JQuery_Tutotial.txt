JQuery in HTML - This chapter allows you to embed JQuery objects in html. This is important wrt creating interactive web pages.

What is jQuery?
jQuery is a library, or set of helpful add-ons, to the JavaScript programming language. It may seem counterintuitive to learn how to use a library before learning the actual language, but there are a few good reasons for this.

It takes a while to become comfortable with JavaScript, and it's trickier to manipulate HTML elements directly with JavaScript than with jQuery. In order to help you build awesome websites faster, we're starting you off with jQuery.
jQuery provides a simple interface for the underlying JavaScript. It's easier for many users to learn jQuery first, then dive into the nitty-gritty JavaScript details later.
jQuery is much better at giving you immediate, visual results than regular JavaScript. By the end of this lesson, you'll have built your own interactive button!


##############Linking Your HTML and JavaScript Files###################
Great! Now we need to link our HTML page to our jQuery script so our jQuery magic will affect our HTML.

Just like we need a <link> tag to connect our HTML and CSS, we need a <script> tag to connect our HTML and jQuery. The tag looks like this:

<script type="text/javascript" src="script.js"></script>


#####################Getting Started############################
Next, we'll need to start up our jQuery magic using the $(document).ready(); syntax you've seen. It works like this:

$() says, "hey, jQuery things are about to happen!"
Putting document between the parentheses tells us that we're about to work our magic on the HTML document itself.
.ready(); is a function, or basic action, in jQuery. It says "hey, I'm going to do stuff as soon as the HTML document is ready!"
Whatever goes in .ready()'s parentheses is the jQuery event that occurs as soon as the HTML document is ready.
So,

$(document).ready(something);
says: "when the HTML document is ready, do something!" (We'll show you how to replace something with an action in the next exercise.)

Note that .ready(); ends with a semicolon. This tells jQuery that you're done giving it a command.

#################The Functional Approach#############################
Perfect! Now we need to put something inside our ready() function.

Remember, when we say "function," you can think "action." Functions are the basic unit of doing work in jQuery.

For this reason, jQuery includes a function keyword. The syntax looks like this:

function(){
    jQuery magic;
}
If we add our function inside our .ready(), jQuery will run the code in our function as soon as the HTML document loads. The syntax would then look like this:

$(document).ready(function() {
    jQuery magic;
});
Remember, we end our jQuery statements with a semicolon.


################Electr(on)ic Slide#######################

Almost there! Now we just need to include an action in the body of our function. In this case, we'll make a header div for our HTML page slide into view.

Between the {}s of our function(), we'll want to turn our div into a jQuery object so jQuery can manipulate it. Much like we use .ready() on $(document), we'll use the .slideDown() action on our div jQuery object.

Inside .slideDown's parentheses, we'll want to tell it how quickly to slide down. Let's enter 'slow' (include the quotes).



###############Get Yourself In...########################
Great! Next, let's include our function keyword and two new actions together, mouseenter() and fadeTo().

mouseenter() does what you might expect: it produces a change when your mouse enters a given HTML element. For example,

$(document).ready(function() {
    $('div').mouseenter(function() {
        $('div').hide();
    });
});
would hide every <div> on the page as soon as you mouse over one. (We'll find out how to affect just one <div> among many in the next lesson.) For now, we only have one <div>, so this setup is okay.

Instead of hide(), however, we'll place fadeTo() inside mouseenter(). fadeTo() takes two arguments, or inputs, between its parentheses, separated by a comma: the speed at which to fade, and the opacity (or transparency) to fade to. For example,

fadeTo('fast', 0.25);
would quickly fade the target element to 25% of its original opacity, making it very light-colored.

#############...and Get Yourself Out!########################

Excellent! Your button looks great now—it stands out when the user mouses over it.

However, you'll notice that when you take your cursor off the button, it stays dark. What we really want is for our button to become light again when our mouse leaves.

You might have guessed that jQuery includes a mouseleave() action. If so, you're right! (If you're curious, you can learn more about these actions in the jQuery documentation.)

Script.js. This will fade out and fade in the mouse hover on a button.

$(document).ready(function(){
    $('div').mouseenter(function(){
    
        $('div').fadeTo('fast',1);
        });    
    $('div').mouseleave(function(){
        
        $('div').fadeTo('fast',0.5)
        
        });
    });


##############Functions, Part I: $(document).ready################

Functions are the basic unit of action in jQuery. The main entry point of most jQuery applications is a block of code that looks like this:

$(document).ready(function() {
    Do something
});
Let's go through it bit by bit.

$(document) is a jQuery object. The $() is actually a function in disguise; it turns the document into a jQuery object.
.ready() is a type of function; you can think of it as sort of a helper that runs the code inside its parentheses as soon as the HTML document is ready.
function(){} is the action that .ready() will perform as soon as the HTML document is loaded. (In the above example, the Do something placeholder is where those actions would go.)


##############Variables###################

Variables are a place for us to store information for use at a later time. Variables can hold any type of information you work with, so just think of them as containers.

The single = sign is used to assign values. For instance, in jQuery, you can write

var lucky = 7;
var name = "Codecademy";
var $p = $('p');
Our first variable contains a number, 7, while the second variable contains some text, "Codecademy". Our 3rd variable stores the result of a jQuery selector $('p') in the variable $p . As you can see, this is just a handy way to save this information for later.

Why would we do this? Well, up until now we haven't had to modify anything more than once. If we wanted to change the webpage based on new information, we would need to store that information in variables. Maybe you want to create a loading page and have it vanish as you receive that information. It'd be a good idea to use variables.

Check out the preview window. All looks well and good, except for #4—that's nonsense!

Create a variable called $target in script.js and use the = sign to assign it to the jQuery selector that represents #4 in the ordered list. When you run your code, it should fade away!

You're going to need your CSS knowledge for this one and there is more then one way to achieve this. Check the Hint if you need a reminder!

?

Solution -

$(document).ready(function() {
    $target = $('li:nth-child(4)')
    $target.fadeOut('fast');
});


###########$p vs $('p')#######################

You probably noticed that we used both $ and $() in the last exercise:

var $p = $('p');
There's a subtle difference between the two.

$p is just a variable name. There is no magic associated with the $ in $p; it's just a convention for saying, "hey, this variable contains a jQuery object." We could call $p anything we want: $paragraph, paragraph, space_cows, whatever! It's just helpful for people reading our code to see $p, since this is a concise way of saying "hey, there's a 'p' jQuery object in here."

$(), on the other hand, is magic. This is the function in disguise that creates jQuery objects. If you're making a jQuery object, you gotta use it!


############Selecting by Class##########
We don't have to limit ourselves to selecting HTML elements like <p> and <div>; essentially, we can put any CSS selector in quotes and pass it into $(). This means we can select classes, too!

Recall that we can select classes in CSS by using a dot (.). If we have class="red" in our HTML, we can target it in CSS with .red. In jQuery, all we need to do is put '.red' in quotes, and we can pass it to $() to make a jQuery object.

Button is the button name which will be clicked in the below example. This will fade away the class id vanish which contains all the divs.

$(document).ready(function() {
    $('button').click(function() {
       $('.vanish').fadeOut('slow') ;
    });
});

###########Flexible Selections######################

Anything you can target with CSS, you can modify with jQuery. For example, we can apply a fadeTo() to a p selector like this:

$('p').fadeTo('slow', 0);
We can apply a fadeTo() to an li selector like this:

$('li').fadeTo('slow', 0);
We can apply a fadeTo() to both the p and li selectors like this:

$('p, li').fadeTo('slow', 0);
This is called a compound selector.

Let's use a compound selector to apply a fadeTo() to both the .pink and .red selectors.


##########'this' is Important!####################

In the last lesson, we had some code that looked like this:

$(document).ready(function() {
    $('div').mouseenter(function() {
        $('div').hide();
    });
});
The second line is good: this tells us that when we mouse into a div, we should take a certain action. However, $('div').hide(); won't just hide the div you mouse into; it will hide all the divs on the page. How can we tell jQuery we only want to affect this particular div?

With this, of course!

The this keyword refers to the jQuery object you're currently doing something with. Its complete rules are a little tricky, but the important thing to understand is if you use an event handler on an element—that's the fancy name for actions like .click() and .mouseenter(), since they handle jQuery events—you can call the actual event that occurs (such as fadeOut()) on $(this), and the event will only affect the element you're currently doing something with (for example, clicking on or mousing over).



########## Toggling Our Panel  ###################

Perfect! Just one more step: we need to tell .click() what to do. In this case, when our pull tab is clicked, we want our sliding panel (with the class .panel) to open or close.

The jQuery event we need to toggle our sliding panel is (you guessed it): .slideToggle()! We'll pass it one input, which is the speed of our slide animation.


$(document).ready(function(){
    $('.pull-me').click(function(){
        $('.panel').slideToggle('slow')
    
    });
    
    });

###########Inserting Elements#######################

We can insert our newly created elements using a few jQuery actions.

.append() inserts the specified element as the last child of the target element. .prepend() inserts the specified element as the first child of the target element. If we have a div of class .info,

$(".info").append("<p>Stuff!</p>");
$(".info").prepend("<p>Stuff!</p>");
will add a paragraph containing the text "Stuff!" inside all divs of class .info. .append() will make the paragraph the last child of each div; .prepend() will make the paragraph the first child of each div. (Note: see the Hint if you're using single quotes.)

.appendTo() does the same as .append(), but it just reverses the order of "what to add" and "where to add it." The code

$('<p>Stuff!</p>').appendTo('.info');
has the same effect as the .append() code above. .prependTo() has a similar relationship to .prepend().


#########Removing Elements##################

Adding elements to our HTML documents is great, but without the ability to remove them, our pages can quickly become cluttered. Thankfully, we have two jQuery functions, .empty() and .remove(), that help us delete content from our pages.

.empty() deletes an element's content and all its descendants. For instance, if you .empty() an 'ol', you'll also remove all its 'li's and their text.

.remove(), not only deletes an element's content, but deletes the element itself.


#########Adding and Removing Classes#################

We don't have to limit ourselves to adding or removing entire elements, though—we can fine-tune our jQuery superpowers to alter classes, CSS, and even the contents of our HTML elements.

Let's start with classes. jQuery includes two functions, .addClass() and .removeClass(), that can be used to add or remove a class from an element. This is great if, for example, you have a highlighted class that you want to apply to an element when clicked.

The syntax looks like this:

$('selector').addClass('className');
$('selector').removeClass('className');
where 'selector' is the HTML element you want and 'className' is the class name you want to add or remove.

Remember: You aren't selecting anything, you are modifying your element. This means that you do not need # or . before your class.

$(document).ready(function(){
    $("#text").click(function(){
        $(this).addClass("highlighted");
        
        });
    
    });

###########Toggling Classes##################

What if we want to toggle a class back and forth, though? That is, what if we want jQuery to automatically check to see whether our #text is .highlighted, so that when we click on it, it adds the class if it isn't there and removes it if it is?

As you probably guessed, jQuery includes a .toggleClass() function that does exactly this. If the element it's called on has the class it receives as an input, .toggleClass() removes that class; if the target element doesn't have that class, .toggleClass() adds it


###########Changing Your Style############

What if we want to fine-tune individual CSS property values, though? Remember style="height:300px; width:300px;"? jQuery makes it a snap!

Because resizing elements is so common, jQuery has specific .height() and .width() functions that can be used to change the heights and widths of HTML elements. For instance:

    $("div").height("100px");
    $("div").width("50px");
would give all <div>s on the page a height of 100 pixels and a width of 50 pixels.

jQuery also includes a general-purpose .css() function that takes two inputs: the first is the CSS element to alter, and the second is the value to set it to. For example:

    $("div").css("background-color","#008800");
would give all <div>s on the page a green background color. You can modify any element's CSS attributes this way.

############Modifying Content#################

Finally, we can update the contents of our HTML elements—that is, the bit between the opening and closing tags—using the .html() and .val() functions.

.html() can be used to set the contents of the first element match it finds. For instance,

$('div').html();
will get the HTML contents of the first div it finds, and

$('div').html("I love jQuery!");
will set the contents of the first div it finds to "I love jQuery!"

.val() is used to get the value of form elements. For example,

$('input:checkbox:checked').val();
would get the value of the first checked checkbox that jQuery finds.

###########Click Da Button! Do It Naoughw!##############

You'll notice we've set up an HTML form for grabbing the user's input. We'll need to store the user's input in a variable, which will allow us to append that input to the body of the HTML document later on.

You can set a variable equal to the contents of the input field using .val(), like so:

//Get the value from an input
var input = $('input[name=checkListItem]').val();
Our selector finds our specific input using a css selector on our checkListItem input
We call val() to get the value of the field

######################Append to Body################

Perfect! Now we want to add our HTML element to the document. We can do this using our handy .append() function.

Let's go ahead and append to our div with the .list class. We'll append a <div> with class="item", since we'll want a way to target our appended <div>s later when we remove them. (A "to do" list is no good if we can't check things off it.)

We'll want the contents of our div to be the contents of our input field, which we saved in the variable toAdd. That means when we append, we'll want to append

$(".list").append('<div class="item">' + toAdd + '</div>')  ---/* where .list is the class name.


###############Remove What's Been Clicked#########################

Great job! Finally, we want to be able to check items off our list.

You might think we could do this:

$('.item').click(function() {
    $(this).remove();
});
and that's not a bad idea. The problem is that it won't work—jQuery looks for all the .items when the DOM is loaded, so by the time your document is ready, it's already decided there are no .items to .remove(), and your code won't work.

For this, we'll need a new event handler: .on(). You can think of .on() as a general handler that takes the event, its selector, and an action as inputs. The syntax looks like this:

$(document).on('event', 'selector', function() {
    Do something!
});
In this case, 'event' will be 'click', 'selector' will be '.item', and the thing we'll want to do is call .remove() on this.

$(document).ready(function(){
    $("#button").click(function(){
        
        var toAdd = $('input[name=checkListItem]').val();
        $(".list").append('<div class="item">' + toAdd + '</div>'
        
        );
        
        });
    
    $(document).on('click', '.item', $(this).remove());
    
    });


################  The .dblclick() Event   ################################

Now that we've reviewed our jQuery event handlers, let's learn a new one.

We might want to cause a jQuery effect when a user double clicks on an element, rather than just single-clicking. We can do this with the .dblclick() event handler.

################Hover#####################


What if you wanted to create an effect when your mouse is on top of an object, then have that effect vanish when your mouse moved away? You might notice this effect in use on many site's navigation bars!

$('div').hover(
    function(){
      $(this).addClass('highlight');
   },
   function(){
      $(this).removeClass('highlight');
   }
);
We first select the element we want to modify $('div')
Secondly notice that our hover effect is able to take two functions(){} separated by a comma. The comma is very important!
The first function(){} we pass will be run when we first mouse over our target. Here we apply a class of highlight
The second function(){} will be called when our mouse leaves the object. This is where we remove the class highlight
Your second function(){} doesn't have to be the opposite of the first function(){}, but it would be very common!

$(document).ready(function(){

  $('div' ).hover(
    function(){
    $(this).addClass('active');
    },
    function(){
    $(this).removeClass('active');
    }
  );

});


############## The .keydown() Event###########

You're not limited to mouse events in jQuery—you can trigger events using the keyboard, as well!

The .keydown() event is triggered whenever a key on the keyboard is pressed. It only works on whatever page element has focus, so you'll need to click on the window containing your div before pressing a key in order for you to see its effects.

Let's go ahead and combine our new event with a new effect: .animate()! We'll use this to move an object on the screen whenever we press a key.

The .animate() effect takes two inputs: the animation to perform, and the time in which to perform the animation. Here's an example:

$(document).ready(function() {
   $('div').animate({left:'+=10px'},500);
});
This will take the first div it finds and move it ten pixels to the right. Remember, increasing the distance from the left margin moves something to the right; the += bit is just a shorthand for "take the existing number and add ten to it." In this case, it add ten pixels to the current distance from the left margin.


##############.bounce() #########################

Cool, right? But we can do much more than just blow things up.

Another possible effect is 'bounce'. We give this as an input to .effect() just like 'explode', but we add an extra input to tell it how many times to bounce. This code will make our target 'div' bounce twice in 200 milliseconds:

$('div').effect('bounce', {times:2}, 200);


##############We can also make Krypton .slide() into view. Not surprisingly, we do this by calling the .effect() effect and passing in 'slide' as an input.

If you want to see everything jQuery UI can do, you can check out the documentation here!################################

##############Special Effects############

The .effect() effect has all kinds of magical goodness in it, but it's not the most amazing thing jQuery UI can do. The library has a number of built-in effects that can make your website look sleek and professional with surprisingly little code.

$(document).ready(function() {
    $("#menu").accordion({collapsible: true, active: false});
});


##############jQuery UI, is There Anything You Can't Do?##################

All right! Time to use jQuery UI to create that awesome-looking accordion-style dropdown menu we saw in the last section. For this, we'll be using jQuery UI's built-in .accordion() function. (Handy, no?)

First, however, we'll need some additional HTML elements.


$(document).ready(function(){
     $('#menu').accordion();  
    });







HTML Box Model for Margins - 

1) The margin is the space around the element. The larger the margin, the more space between our element and the elements around it. We can adjust the margin to move our HTML elements closer to or farther from each other.
2) The border is the edge of the element. It's what we've been making visible every time we set the border property.
3) The padding is the spacing between the content and the border. We can adjust this value with CSS to move the border closer to or farther from the content.
4) The content is the actual "stuff" in the box. If we're talking about a <p> element, the "stuff" is the text of the paragraph.
